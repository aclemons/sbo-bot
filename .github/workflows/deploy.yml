---
name: Build and deploy sbo-bot infrastructure

on:
  push:
    branches: master

env:
  AWS_DEFAULT_REGION: eu-central-1
  SESSION_DURATION: 900

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  infra:
    name: Apply tofu
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          show-progress: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a # v3.3.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Compute git sha
        run:
          echo "DOCKER_IMAGE_VERSION=git$(git rev-parse --short HEAD)" >>
          "$GITHUB_ENV"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume:
            arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/sbobot-automation
          role-duration-seconds: ${{ env.SESSION_DURATION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          mask-password: 'true'

      - name: Build and push github-app
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        with:
          push: true
          platforms: linux/arm64/v8
          cache-from: type=gha,scope=githubapp
          cache-to: type=gha,mode=max,scope=githubapp
          context: github
          file: github/Dockerfile
          provenance: false
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/sbobot/bot:github-app-latest
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/sbobot/bot:github-app-${{ env.DOCKER_IMAGE_VERSION }}

      - name: Build and push gitlab-webhook
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        with:
          push: true
          platforms: linux/arm64/v8
          cache-from: type=gha,scope=gitlabwebhook
          cache-to: type=gha,mode=max,scope=gitlabwebhook
          context: gitlab
          file: gitlab/Dockerfile
          provenance: false
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/sbobot/bot:gitlab-webhook-latest
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/sbobot/bot:gitlab-webhook-${{ env.DOCKER_IMAGE_VERSION }}

      - name: Configure tofu plugin cache
        run: |
          printf 'plugin_cache_dir = "%s/.tofu.d/plugin-cache"\n' "$HOME" > ~/.tofurc
          mkdir -p ~/.tofu.d/plugin-cache

      - name: Cache Tofu plugins
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ~/.tofu.d/plugin-cache
          key: ${{ runner.os }}-tofu-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Set tofu version
        run: echo "TOFU_VERSION=$(cat tf/.opentofu-version)" >> "$GITHUB_ENV"

      - uses: opentofu/setup-opentofu@592200bd4b9bbf4772ace78f887668b1aee8f716 # v1.0.5
        with:
          tofu_version: ${{ env.TOFU_VERSION }}
          tofu_wrapper: false

      - name: Configure AWS Credentials (for tofu)
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume:
            arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/sbobot-automation
          role-duration-seconds: ${{ env.SESSION_DURATION }}

      - name: Tofu init
        run: tofu init -lockfile=readonly
        working-directory: tf

      - name: Tofu apply
        run:
          tofu apply -auto-approve -input=false -var docker_image_version=${{
          env.DOCKER_IMAGE_VERSION }}
        working-directory: tf

      - name: Clean up old lambda versions
        run: |
          name="sbobot-github-app"
          aws lambda list-versions-by-function --function-name "$name" | jq -r '.Versions | .[] | [select(.Version != "$LATEST")] | .[].Version' | tac | sed '1,10d' | tac | while read -r version ; do
            printf 'Removing version %s of function %s\n' "$version" "$name"
            aws lambda delete-function --function-name "$name" --qualifier "$version"
          done

          name="sbobot-gitlab-webhook"
          aws lambda list-versions-by-function --function-name "$name" | jq -r '.Versions | .[] | [select(.Version != "$LATEST")] | .[].Version' | tac | sed '1,10d' | tac | while read -r version ; do
            printf 'Removing version %s of function %s\n' "$version" "$name"
            aws lambda delete-function --function-name "$name" --qualifier "$version"
          done

  seed-cache:
    name: Seed various caches from the master branch for ci checks
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    env:
      # renovate: datasource=pypi depName=pre-commit
      PRE_COMMIT_VERSION: '4.0.1'
      # renovate: datasource=pypi depName=uv
      UV_VERSION: '0.5.17'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          show-progress: false

      - name: Install uv
        uses: astral-sh/setup-uv@887a942a15af3a7626099df99e897a18d9e5ab3a # v5.1.0
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: 'gitlab/uv.lock'

      - name: Configure pre-commit repo cache
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ~/.cache/pre-commit
          key:
            ${{ runner.os }}-pre-commit-repo-${{ env.pythonLocation }}-${{
            hashFiles('.pre-commit-config.yaml') }}

      - name: Configure pre-commit install cache
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        id: pre_commit_install_cache
        with:
          path: ~/.pre-commit-venv
          key:
            ${{ runner.os }}-pre-commit-venv-${{ env.PRE_COMMIT_VERSION }}-${{
            env.pythonLocation }}

      - name: Install pre-commit
        if: steps.pre_commit_install_cache.outputs.cache-hit != 'true'
        run: |
          python -m venv ~/.pre-commit-venv
          # shellcheck source=/dev/null
          . ~/.pre-commit-venv/bin/activate
          pip install pre-commit==${{ env.PRE_COMMIT_VERSION }}

      - uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: |
            e2e-tests/package-lock.json

      - uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version-file: 'gitlab/.python-version'

      - name: Install python dependencies
        working-directory: gitlab
        run: |
          uv sync --all-extras --dev

      - name: Install e2e-tests dependencies
        working-directory: e2e-tests
        run: |
          npm ci

      - name: Run pre-commit
        run: |
          # shellcheck source=/dev/null
          . ~/.pre-commit-venv/bin/activate
          pre-commit run --all-files --color=always --show-diff-on-failure
